(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var DrawerMenu, LazyLink, ProgressBar, SmoothScroll, drawerMenu, lazyLink, progressBar, smoothScroll;

DrawerMenu = require('./app/drawer-menu');

LazyLink = require('./app/lazy-link');

SmoothScroll = require('./app/smooth-scroll');

ProgressBar = require('./app/progress-bar');

drawerMenu = new DrawerMenu();

lazyLink = new LazyLink();

smoothScroll = new SmoothScroll();

progressBar = new ProgressBar();



},{"./app/drawer-menu":2,"./app/lazy-link":3,"./app/progress-bar":4,"./app/smooth-scroll":5}],2:[function(require,module,exports){
var DrawerMenu, Inheritance, Support,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Inheritance = require('./../utility/inheritance');

Support = require('./../utility/support');

DrawerMenu = (function(_super) {
  __extends(DrawerMenu, _super);

  DrawerMenu.prototype.OPEN_CLASS = 'is-open';

  DrawerMenu.prototype.FIXED_CLASS = 'jsc-ofh-i';

  DrawerMenu.prototype.STYLE_ATTR_NAME = 'style';

  DrawerMenu.prototype.$window = $(window);

  DrawerMenu.prototype.$html = $('html');

  DrawerMenu.prototype.$body = $('body');

  DrawerMenu.prototype.$wrapper = $('#jsi-drawer-menu');

  DrawerMenu.prototype.$trigger = $('#jsi-drawer-menu-trigger');

  DrawerMenu.prototype.$targetContents = $('#jsi-drawer-menu-contents-target');

  DrawerMenu.prototype.$targetNav = $('#jsi-drawer-menu-nav-target');

  DrawerMenu.prototype.$ovarLay = $('#jsi-drawer-menu-overlay');

  DrawerMenu.prototype.$tagetAll = $([DrawerMenu.prototype.$trigger[0], DrawerMenu.prototype.$targetContents[0], DrawerMenu.prototype.$targetNav[0], DrawerMenu.prototype.$ovarLay[0]]);

  DrawerMenu.prototype.flg = false;

  function DrawerMenu() {
    this.extend(new Support());
    this.isiOS = this.isiOS();
    this.event = this.isEvent();
    this.attachEvent();
  }

  DrawerMenu.prototype.attachEvent = function() {
    this.$trigger.on(this.event, (function(_this) {
      return function() {
        if (!_this.flg) {
          _this.toggleSlide();
          _this.getWindowHeight();
          _this.adjustScrollPosition();
          return _this.invertFlg();
        }
      };
    })(this));
    this.$ovarLay.on(this.event, (function(_this) {
      return function() {
        if (!_this.flg) {
          _this.removeScrollPosition();
          _this.closeSlide();
          return _this.invertFlg();
        }
      };
    })(this));
    return this.$targetContents.on('webkitTransitionEnd transitionend', (function(_this) {
      return function(e) {
        if (e.originalEvent.propertyName === 'transform' || '-webkit-transform') {
          return _this.invertFlg();
        }
      };
    })(this));
  };

  DrawerMenu.prototype.invertFlg = function() {
    return this.flg = !this.flg;
  };

  DrawerMenu.prototype.toggleSlide = function() {
    return this.$tagetAll.toggleClass(this.OPEN_CLASS);
  };

  DrawerMenu.prototype.closeSlide = function() {
    return this.$tagetAll.removeClass(this.OPEN_CLASS);
  };

  DrawerMenu.prototype.getScrollPosition = function() {
    return this.scrollPosition = this.$window.scrollTop();
  };

  DrawerMenu.prototype.getWindowHeight = function() {
    return this.windowHeight = this.$window.height();
  };

  DrawerMenu.prototype.adjustScrollPosition = function() {
    if (this.$targetContents.hasClass(this.OPEN_CLASS)) {
      this.getScrollPosition();
      return this.addScrollPosition();
    } else {
      return this.removeScrollPosition();
    }
  };

  DrawerMenu.prototype.addScrollPosition = function() {
    if (this.isiOS) {
      this.$wrapper.css({
        top: -this.scrollPosition,
        height: this.scrollPosition + this.windowHeight
      });
      return this.$html.add(this.$body).addClass(this.FIXED_CLASS);
    } else {
      this.$body.width(this.$body.width());
      return this.$body.addClass(this.FIXED_CLASS);
    }
  };

  DrawerMenu.prototype.removeScrollPosition = function() {
    if (this.isiOS) {
      this.$wrapper.removeAttr(this.STYLE_ATTR_NAME);
      return this.$html.add(this.$body).removeClass(this.FIXED_CLASS).scrollTop(this.scrollPosition);
    } else {
      this.$body.width('');
      return this.$body.removeClass(this.FIXED_CLASS);
    }
  };

  return DrawerMenu;

})(Inheritance);

module.exports = DrawerMenu;



},{"./../utility/inheritance":6,"./../utility/support":7}],3:[function(require,module,exports){
var DrawerMenu, LazyLink, Support,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DrawerMenu = require('./drawer-menu');

Support = require('./../utility/support');

LazyLink = (function(_super) {
  var flg;

  __extends(LazyLink, _super);

  LazyLink.prototype.VISIBLE_CLASS = 'is-visible';

  LazyLink.prototype.DURATION = 300;

  LazyLink.prototype.$wrapper = $('#jsi-lazy-link');

  LazyLink.prototype.$trigger = LazyLink.prototype.$wrapper.find('a');

  LazyLink.prototype.$target = $('.jsc-lazy-link-target');

  flg = false;

  function LazyLink() {
    this.extend(new Support());
    this.event = this.isEvent();
    this.attachEvent();
  }

  LazyLink.prototype.attachEvent = function() {
    this.$trigger.on(this.event, (function(_this) {
      return function(e) {
        e.preventDefault();
        _this.getURL(e.currentTarget);
        _this.closeSlide();
        return _this.invertFlg();
      };
    })(this));
    this.$targetContents.on('webkitTransitionEnd transitionend', (function(_this) {
      return function() {
        if (_this.flg) {
          _this.fadeOut();
          return _this.toLink();
        }
      };
    })(this));
    return this.$window.on('load', (function(_this) {
      return function() {
        return _this.fadeIn();
      };
    })(this));
  };

  LazyLink.prototype.invertFlg = function() {
    return this.flg = !this.flg;
  };

  LazyLink.prototype.getURL = function(target) {
    return this.URL = $(target).attr('href');
  };

  LazyLink.prototype.toLink = function() {
    return setTimeout((function(_this) {
      return function() {
        return location.href = _this.URL;
      };
    })(this), this.DURATION);
  };

  LazyLink.prototype.fadeOut = function() {
    return this.$target.removeClass(this.VISIBLE_CLASS);
  };

  LazyLink.prototype.fadeIn = function() {
    return setTimeout((function(_this) {
      return function() {
        return _this.$target.addClass(_this.VISIBLE_CLASS);
      };
    })(this), 0);
  };

  return LazyLink;

})(DrawerMenu);

module.exports = LazyLink;



},{"./../utility/support":7,"./drawer-menu":2}],4:[function(require,module,exports){
var ProgressBar;

ProgressBar = (function() {
  ProgressBar.prototype.ACTIVE_CLASS = 'is-active';

  ProgressBar.prototype.$window = $(window);

  ProgressBar.prototype.$wrapper = $('#jsi-progress-bar');

  ProgressBar.prototype.$target = ProgressBar.prototype.$wrapper.find('.jsc-progress-bar-target');

  ProgressBar.prototype.scrollPosition = 0;

  function ProgressBar() {
    this.getPosition();
    this.getScrollPosition;
    this.addActiveClass();
    this.attachEvent();
  }

  ProgressBar.prototype.attachEvent = function() {
    return this.$window.on('scroll', (function(_this) {
      return function() {
        _this.getScrollPosition();
        return _this.addActiveClass();
      };
    })(this));
  };

  ProgressBar.prototype.getScrollPosition = function() {
    return this.scrollPosition = this.$window.scrollTop();
  };

  ProgressBar.prototype.getPosition = function() {
    this.windowHeight = this.$window.height();
    this.targetPosition = this.$wrapper.offset().top;
    return this.targetHeight = this.$wrapper.height();
  };

  ProgressBar.prototype.addActiveClass = function() {
    if (this.windowHeight + this.scrollPosition > this.targetPosition + this.targetHeight) {
      return setTimeout((function(_this) {
        return function() {
          return _this.$target.addClass(_this.ACTIVE_CLASS);
        };
      })(this), 0);
    }
  };

  return ProgressBar;

})();

module.exports = ProgressBar;



},{}],5:[function(require,module,exports){
var SmoothScroll, Support,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Support = require('./../utility/support');

SmoothScroll = (function(_super) {
  __extends(SmoothScroll, _super);

  function SmoothScroll() {
    this.DURATION = 800;
    this.EASING = 'swing';
    this.$target = $('html, body');
    this.$trigger = $('#jsi-smooth-scroll');
    this.event = this.isEvent();
    this.attachEvent();
  }

  SmoothScroll.prototype.attachEvent = function() {
    return this.$trigger.on(this.event, (function(_this) {
      return function() {
        return _this.scrollTop();
      };
    })(this));
  };

  SmoothScroll.prototype.scrollTop = function() {
    return this.$target.animate({
      scrollTop: 0
    }, this.DURATION, this.EASING);
  };

  return SmoothScroll;

})(Support);

module.exports = SmoothScroll;



},{"./../utility/support":7}],6:[function(require,module,exports){
var Inheritance,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Inheritance = (function() {
  var moduleKeywords;

  function Inheritance() {}

  moduleKeywords = ['extended', 'included'];

  Inheritance.prototype.extend = function(obj) {
    var key, value, _ref;
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this[key] = value;
      }
    }
    if ((_ref = obj.extended) != null) {
      _ref.apply(this);
    }
    return this;
  };

  Inheritance.prototype.include = function(obj) {
    var key, value, _ref;
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this.prototype[key] = value;
      }
    }
    if ((_ref = obj.included) != null) {
      _ref.apply(this);
    }
    return this;
  };

  return Inheritance;

})();

module.exports = Inheritance;



},{}],7:[function(require,module,exports){
var Support;

Support = (function() {
  var browser, userAgent;

  function Support() {}

  userAgent = window.navigator.userAgent.toLowerCase();

  browser = null;

  Support.prototype.isWindows = function() {
    return userAgent.indexOf('win') !== -1;
  };

  Support.prototype.isMac = function() {
    return userAgent.indexOf('mac') !== -1;
  };

  Support.prototype.isiPhone = function() {
    return userAgent.indexOf('iphone') !== -1;
  };

  Support.prototype.isiPad = function() {
    return userAgent.indexOf('ipad') !== -1;
  };

  Support.prototype.isiOS = function() {
    return this.isiPhone() || this.isiPad();
  };

  Support.prototype.isBrowser = function() {
    if (userAgent.indexOf('trident/7') !== -1) {
      return browser = 'ie11';
    } else if (userAgent.indexOf('chrome') !== -1) {
      return browser = 'chrome';
    } else if (userAgent.indexOf('safari') !== -1) {
      return browser = 'safari';
    } else if (userAgent.indexOf('firefox') !== -1) {
      return browser = 'firefox';
    }
  };

  Support.prototype.isEvent = function() {
    var event;
    return event = 'ontouchstart' in window ? 'touchend': 'click';
  };

  return Support;

})();

module.exports = Support;



},{}]},{},[1])


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXZlbG9wL3NvdXJjZS9jb2ZmZWUvc2tpbGwuY29mZmVlIiwiZGV2ZWxvcC9zb3VyY2UvY29mZmVlL2FwcC9kcmF3ZXItbWVudS5jb2ZmZWUiLCJkZXZlbG9wL3NvdXJjZS9jb2ZmZWUvYXBwL2xhenktbGluay5jb2ZmZWUiLCJkZXZlbG9wL3NvdXJjZS9jb2ZmZWUvYXBwL3Byb2dyZXNzLWJhci5jb2ZmZWUiLCJkZXZlbG9wL3NvdXJjZS9jb2ZmZWUvYXBwL3Ntb290aC1zY3JvbGwuY29mZmVlIiwiZGV2ZWxvcC9zb3VyY2UvY29mZmVlL3V0aWxpdHkvaW5oZXJpdGFuY2UuY29mZmVlIiwiZGV2ZWxvcC9zb3VyY2UvY29mZmVlL3V0aWxpdHkvc3VwcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxJQUFBLGdHQUFBOztBQUFBLFVBQUEsR0FBYSxPQUFBLENBQVEsbUJBQVIsQ0FBYixDQUFBOztBQUFBLFFBQ0EsR0FBVyxPQUFBLENBQVEsaUJBQVIsQ0FEWCxDQUFBOztBQUFBLFlBRUEsR0FBZSxPQUFBLENBQVEscUJBQVIsQ0FGZixDQUFBOztBQUFBLFdBR0EsR0FBYyxPQUFBLENBQVEsb0JBQVIsQ0FIZCxDQUFBOztBQUFBLFVBS0EsR0FBaUIsSUFBQSxVQUFBLENBQUEsQ0FMakIsQ0FBQTs7QUFBQSxRQU1BLEdBQWUsSUFBQSxRQUFBLENBQUEsQ0FOZixDQUFBOztBQUFBLFlBT0EsR0FBbUIsSUFBQSxZQUFBLENBQUEsQ0FQbkIsQ0FBQTs7QUFBQSxXQVFBLEdBQWtCLElBQUEsV0FBQSxDQUFBLENBUmxCLENBQUE7Ozs7O0FDQUEsSUFBQSxnQ0FBQTtFQUFBO2lTQUFBOztBQUFBLFdBQUEsR0FBYyxPQUFBLENBQVEsMEJBQVIsQ0FBZCxDQUFBOztBQUFBLE9BQ0EsR0FBVSxPQUFBLENBQVEsc0JBQVIs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R0FBUSwrQ0FERDtFQUFBLENBNUJULENBQUE7O2lCQUFBOztJQURGLENBQUE7O0FBQUEsTUFnQ00sQ0FBQyxPQUFQLEdBQWlCLE9BaENqQixDQUFBIiwiZmlsZSI6InNraWxsLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJEcmF3ZXJNZW51ID0gcmVxdWlyZSAnLi9hcHAvZHJhd2VyLW1lbnUnXG5MYXp5TGluayA9IHJlcXVpcmUgJy4vYXBwL2xhenktbGluaydcblNtb290aFNjcm9sbCA9IHJlcXVpcmUgJy4vYXBwL3Ntb290aC1zY3JvbGwnXG5Qcm9ncmVzc0JhciA9IHJlcXVpcmUgJy4vYXBwL3Byb2dyZXNzLWJhcidcblxuZHJhd2VyTWVudSA9IG5ldyBEcmF3ZXJNZW51KClcbmxhenlMaW5rID0gbmV3IExhenlMaW5rKClcbnNtb290aFNjcm9sbCA9IG5ldyBTbW9vdGhTY3JvbGwoKVxucHJvZ3Jlc3NCYXIgPSBuZXcgUHJvZ3Jlc3NCYXIoKVxuXG5cbiIsIkluaGVyaXRhbmNlID0gcmVxdWlyZSAnLi8uLi91dGlsaXR5L2luaGVyaXRhbmNlJ1xuU3VwcG9ydCA9IHJlcXVpcmUgJy4vLi4vdXRpbGl0eS9zdXBwb3J0J1xuXG5jbGFzcyBEcmF3ZXJNZW51IGV4dGVuZHMgSW5oZXJpdGFuY2VcbiAgT1BFTl9DTEFTUzogJ2lzLW9wZW4nXG4gIEZJWEVEX0NMQVNTOiAnanNjLW9maC1pJ1xuICBTVFlMRV9BVFRSX05BTUU6ICdzdHlsZSdcblxuICAkd2luZG93OiAkIHdpbmRvd1xuICAkaHRtbDogJCAnaHRtbCdcbiAgJGJvZHk6ICQgJ2JvZHknXG4gICR3cmFwcGVyOiAkICcjanNpLWRyYXdlci1tZW51J1xuICAkdHJpZ2dlcjogJCAnI2pzaS1kcmF3ZXItbWVudS10cmlnZ2VyJ1xuICAkdGFyZ2V0Q29udGVudHM6ICQgJyNqc2ktZHJhd2VyLW1lbnUtY29udGVudHMtdGFyZ2V0J1xuICAkdGFyZ2V0TmF2OiAkICcjanNpLWRyYXdlci1tZW51LW5hdi10YXJnZXQnXG4gICRvdmFyTGF5OiAkICcjanNpLWRyYXdlci1tZW51LW92ZXJsYXknXG4gICR0YWdldEFsbDogJCBbQDo6JHRyaWdnZXJbMF0sIEA6OiR0YXJnZXRDb250ZW50c1swXSwgQDo6JHRhcmdldE5hdlswXSwgQDo6JG92YXJMYXlbMF1dXG5cbiAgZmxnOiBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yOiAtPlxuICAgIEBleHRlbmQgbmV3IFN1cHBvcnQoKVxuICAgIEBpc2lPUyA9IEBpc2lPUygpXG4gICAgQGV2ZW50ID0gQGlzRXZlbnQoKVxuXG4gICAgQGF0dGFjaEV2ZW50KClcblxuICBhdHRhY2hFdmVudDogLT5cbiAgICBAJHRyaWdnZXIub24gQGV2ZW50LCA9PlxuICAgICAgdW5sZXNzIEBmbGdcbiAgICAgICAgQHRvZ2dsZVNsaWRlKClcbiAgICAgICAgQGdldFdpbmRvd0hlaWdodCgpXG4gICAgICAgIEBhZGp1c3RTY3JvbGxQb3NpdGlvbigpXG4gICAgICAgIEBpbnZlcnRGbGcoKVxuXG4gICAgQCRvdmFyTGF5Lm9uIEBldmVudCwgPT5cbiAgICAgIHVubGVzcyBAZmxnXG4gICAgICAgIEByZW1vdmVTY3JvbGxQb3NpdGlvbigpXG4gICAgICAgIEBjbG9zZVNsaWRlKClcbiAgICAgICAgQGludmVydEZsZygpXG5cbiAgICBAJHRhcmdldENvbnRlbnRzLm9uICd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnLCAoZSkgPT5cbiAgICAgIGlmIGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgaXMgJ3RyYW5zZm9ybScgb3IgJy13ZWJraXQtdHJhbnNmb3JtJ1xuICAgICAgICBAaW52ZXJ0RmxnKClcblxuICBpbnZlcnRGbGc6IC0+XG4gICAgQGZsZyA9IG5vdCBAZmxnXG5cbiAgdG9nZ2xlU2xpZGU6IC0+XG4gICAgQCR0YWdldEFsbC50b2dnbGVDbGFzcyBAT1BFTl9DTEFTU1xuXG4gIGNsb3NlU2xpZGU6IC0+XG4gICAgQCR0YWdldEFsbC5yZW1vdmVDbGFzcyBAT1BFTl9DTEFTU1xuXG4gIGdldFNjcm9sbFBvc2l0aW9uOiAtPlxuICAgIEBzY3JvbGxQb3NpdGlvbiA9IEAkd2luZG93LnNjcm9sbFRvcCgpXG5cbiAgZ2V0V2luZG93SGVpZ2h0OiAtPlxuICAgIEB3aW5kb3dIZWlnaHQgPSBAJHdpbmRvdy5oZWlnaHQoKVxuXG4gIGFkanVzdFNjcm9sbFBvc2l0aW9uOiAtPlxuICAgIGlmIEAkdGFyZ2V0Q29udGVudHMuaGFzQ2xhc3MgQE9QRU5fQ0xBU1NcbiAgICAgIEBnZXRTY3JvbGxQb3NpdGlvbigpXG4gICAgICBAYWRkU2Nyb2xsUG9zaXRpb24oKVxuXG4gICAgZWxzZVxuICAgICAgQHJlbW92ZVNjcm9sbFBvc2l0aW9uKClcblxuICBhZGRTY3JvbGxQb3NpdGlvbjogLT5cbiAgICBpZiBAaXNpT1NcbiAgICAgIEAkd3JhcHBlclxuICAgICAgICAuY3NzXG4gICAgICAgICAgdG9wOiAtQHNjcm9sbFBvc2l0aW9uXG4gICAgICAgICAgaGVpZ2h0OiBAc2Nyb2xsUG9zaXRpb24gKyBAd2luZG93SGVpZ2h0XG5cbiAgICAgIEAkaHRtbFxuICAgICAgICAuYWRkIEAkYm9keVxuICAgICAgICAuYWRkQ2xhc3MgQEZJWEVEX0NMQVNTXG5cbiAgICBlbHNlXG4gICAgICBAJGJvZHkud2lkdGggQCRib2R5LndpZHRoKClcbiAgICAgIEAkYm9keS5hZGRDbGFzcyBARklYRURfQ0xBU1NcblxuICByZW1vdmVTY3JvbGxQb3NpdGlvbjogLT5cbiAgICBpZiBAaXNpT1NcbiAgICAgIEAkd3JhcHBlci5yZW1vdmVBdHRyIEBTVFlMRV9BVFRSX05BTUVcblxuICAgICAgQCRodG1sXG4gICAgICAgIC5hZGQgQCRib2R5XG4gICAgICAgIC5yZW1vdmVDbGFzcyBARklYRURfQ0xBU1NcbiAgICAgICAgLnNjcm9sbFRvcCBAc2Nyb2xsUG9zaXRpb25cblxuICAgIGVsc2VcbiAgICAgIEAkYm9keS53aWR0aCAnJ1xuICAgICAgQCRib2R5LnJlbW92ZUNsYXNzIEBGSVhFRF9DTEFTU1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYXdlck1lbnVcbiIsIkRyYXdlck1lbnUgPSByZXF1aXJlICcuL2RyYXdlci1tZW51J1xuU3VwcG9ydCA9IHJlcXVpcmUgJy4vLi4vdXRpbGl0eS9zdXBwb3J0J1xuXG5jbGFzcyBMYXp5TGluayBleHRlbmRzIERyYXdlck1lbnVcbiAgVklTSUJMRV9DTEFTUzogJ2lzLXZpc2libGUnXG4gIERVUkFUSU9OOiAzMDBcblxuICAkd3JhcHBlcjogJCAnI2pzaS1sYXp5LWxpbmsnXG4gICR0cmlnZ2VyOiBAOjokd3JhcHBlci5maW5kICdhJ1xuICAkdGFyZ2V0OiAkICcuanNjLWxhenktbGluay10YXJnZXQnXG5cbiAgZmxnID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcjogKCkgLT5cbiAgICBAZXh0ZW5kIG5ldyBTdXBwb3J0KClcbiAgICBAZXZlbnQgPSBAaXNFdmVudCgpXG5cbiAgICBAYXR0YWNoRXZlbnQoKVxuXG4gIGF0dGFjaEV2ZW50OiAtPlxuICAgIEAkdHJpZ2dlci5vbiBAZXZlbnQsIChlKSA9PlxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAgIEBnZXRVUkwoZS5jdXJyZW50VGFyZ2V0KVxuICAgICAgQGNsb3NlU2xpZGUoKVxuICAgICAgQGludmVydEZsZygpXG5cbiAgICBAJHRhcmdldENvbnRlbnRzLm9uICd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnLCA9PlxuICAgICAgaWYgQGZsZ1xuICAgICAgICBAZmFkZU91dCgpXG4gICAgICAgIEB0b0xpbmsoKVxuXG4gICAgQCR3aW5kb3cub24gJ2xvYWQnLCA9PlxuICAgICAgQGZhZGVJbigpXG5cbiAgaW52ZXJ0RmxnOiAtPlxuICAgIEBmbGcgPSBub3QgQGZsZ1xuXG4gIGdldFVSTDogKHRhcmdldCkgLT5cbiAgICBAVVJMID0gJCh0YXJnZXQpLmF0dHIoJ2hyZWYnKVxuXG4gIHRvTGluazogLT5cbiAgICBzZXRUaW1lb3V0ID0+XG4gICAgICBsb2NhdGlvbi5ocmVmID0gQFVSTFxuICAgICwgQERVUkFUSU9OXG5cbiAgZmFkZU91dDogLT5cbiAgICBAJHRhcmdldC5yZW1vdmVDbGFzcyBAVklTSUJMRV9DTEFTU1xuXG4gIGZhZGVJbjogLT5cbiAgICBzZXRUaW1lb3V0ID0+XG4gICAgICBAJHRhcmdldC5hZGRDbGFzcyBAVklTSUJMRV9DTEFTU1xuICAgICwgMFxuXG5tb2R1bGUuZXhwb3J0cyA9IExhenlMaW5rXG4iLCJjbGFzcyBQcm9ncmVzc0JhclxuICBBQ1RJVkVfQ0xBU1M6ICdpcy1hY3RpdmUnXG5cbiAgJHdpbmRvdzogJCB3aW5kb3dcbiAgJHdyYXBwZXI6ICQgJyNqc2ktcHJvZ3Jlc3MtYmFyJ1xuICAkdGFyZ2V0OiBAOjokd3JhcHBlci5maW5kICcuanNjLXByb2dyZXNzLWJhci10YXJnZXQnXG5cbiAgc2Nyb2xsUG9zaXRpb246IDBcblxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBAZ2V0UG9zaXRpb24oKVxuICAgIEBnZXRTY3JvbGxQb3NpdGlvblxuICAgIEBhZGRBY3RpdmVDbGFzcygpXG4gICAgQGF0dGFjaEV2ZW50KClcblxuICBhdHRhY2hFdmVudDogLT5cbiAgICBAJHdpbmRvdy5vbiAnc2Nyb2xsJywgPT5cbiAgICAgIEBnZXRTY3JvbGxQb3NpdGlvbigpXG4gICAgICBAYWRkQWN0aXZlQ2xhc3MoKVxuXG4gIGdldFNjcm9sbFBvc2l0aW9uOiAtPlxuICAgIEBzY3JvbGxQb3NpdGlvbiA9IEAkd2luZG93LnNjcm9sbFRvcCgpXG5cbiAgZ2V0UG9zaXRpb246IC0+XG4gICAgQHdpbmRvd0hlaWdodCA9IEAkd2luZG93LmhlaWdodCgpXG4gICAgQHRhcmdldFBvc2l0aW9uID0gQCR3cmFwcGVyLm9mZnNldCgpLnRvcFxuICAgIEB0YXJnZXRIZWlnaHQgPSBAJHdyYXBwZXIuaGVpZ2h0KClcblxuICBhZGRBY3RpdmVDbGFzczogLT5cbiAgICBpZiBAd2luZG93SGVpZ2h0ICsgQHNjcm9sbFBvc2l0aW9uID4gQHRhcmdldFBvc2l0aW9uICsgQHRhcmdldEhlaWdodFxuICAgICAgc2V0VGltZW91dCA9PlxuICAgICAgICBAJHRhcmdldC5hZGRDbGFzcyBAQUNUSVZFX0NMQVNTXG4gICAgICAsIDBcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9ncmVzc0JhciIsIlN1cHBvcnQgPSByZXF1aXJlICcuLy4uL3V0aWxpdHkvc3VwcG9ydCdcblxuY2xhc3MgU21vb3RoU2Nyb2xsIGV4dGVuZHMgU3VwcG9ydFxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBARFVSQVRJT04gPSA4MDBcbiAgICBARUFTSU5HID0gJ3N3aW5nJ1xuXG4gICAgQCR0YXJnZXQgPSAkICdodG1sLCBib2R5J1xuICAgIEAkdHJpZ2dlciA9ICQgJyNqc2ktc21vb3RoLXNjcm9sbCdcblxuICAgIEBldmVudCA9IEBpc0V2ZW50KClcbiAgICBAYXR0YWNoRXZlbnQoKVxuXG4gIGF0dGFjaEV2ZW50OiAtPlxuICAgIEAkdHJpZ2dlci5vbiBAZXZlbnQsID0+XG4gICAgICBAc2Nyb2xsVG9wKClcblxuICBzY3JvbGxUb3A6IC0+XG4gICAgQCR0YXJnZXQuYW5pbWF0ZVxuICAgICAgc2Nyb2xsVG9wOiAwXG4gICAgLEBEVVJBVElPTiwgQEVBU0lOR1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNtb290aFNjcm9sbCIsImNsYXNzIEluaGVyaXRhbmNlXG4gIG1vZHVsZUtleXdvcmRzID0gWydleHRlbmRlZCcsICdpbmNsdWRlZCddXG5cbiAgZXh0ZW5kOiAob2JqKSAtPlxuICAgIGZvciBrZXksIHZhbHVlIG9mIG9iaiB3aGVuIGtleSBub3QgaW4gbW9kdWxlS2V5d29yZHNcbiAgICAgIEBba2V5XSA9IHZhbHVlXG5cbiAgICBvYmouZXh0ZW5kZWQ/LmFwcGx5KEApXG4gICAgdGhpc1xuXG4gIGluY2x1ZGU6IChvYmopIC0+XG4gICAgZm9yIGtleSwgdmFsdWUgb2Ygb2JqIHdoZW4ga2V5IG5vdCBpbiBtb2R1bGVLZXl3b3Jkc1xuICAgICAgQDo6W2tleV0gPSB2YWx1ZVxuXG4gICAgb2JqLmluY2x1ZGVkPy5hcHBseShAKVxuICAgIHRoaXNcblxubW9kdWxlLmV4cG9ydHMgPSBJbmhlcml0YW5jZSIsImNsYXNzIFN1cHBvcnRcbiAgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKVxuICBicm93c2VyID0gbnVsbFxuXG4gIGlzV2luZG93czogLT5cbiAgICB1c2VyQWdlbnQuaW5kZXhPZignd2luJykgaXNudCAtMVxuXG4gIGlzTWFjOiAtPlxuICAgIHVzZXJBZ2VudC5pbmRleE9mKCdtYWMnKSBpc250IC0xXG5cbiAgaXNpUGhvbmU6IC0+XG4gICAgdXNlckFnZW50LmluZGV4T2YoJ2lwaG9uZScpIGlzbnQgLTFcblxuICBpc2lQYWQ6IC0+XG4gICAgdXNlckFnZW50LmluZGV4T2YoJ2lwYWQnKSBpc250IC0xXG5cbiAgaXNpT1M6IC0+XG4gICAgQGlzaVBob25lKCkgb3IgQGlzaVBhZCgpXG5cbiAgaXNCcm93c2VyOiAtPlxuICAgIGlmIHVzZXJBZ2VudC5pbmRleE9mKCd0cmlkZW50LzcnKSBpc250IC0xXG4gICAgICBicm93c2VyID0gJ2llMTEnXG4gICAgZWxzZSBpZiB1c2VyQWdlbnQuaW5kZXhPZignY2hyb21lJykgaXNudCAtMVxuICAgICAgYnJvd3NlciA9ICdjaHJvbWUnXG4gICAgZWxzZSBpZiB1c2VyQWdlbnQuaW5kZXhPZignc2FmYXJpJykgaXNudCAtMVxuICAgICAgYnJvd3NlciA9ICdzYWZhcmknXG4gICAgZWxzZSBpZiB1c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpIGlzbnQgLTFcbiAgICAgIGJyb3dzZXIgPSAnZmlyZWZveCdcblxuICBpc0V2ZW50OiAtPlxuICAgIGV2ZW50ID0gYCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyA/ICd0b3VjaGVuZCc6ICdjbGljaydgXG5cbm1vZHVsZS5leHBvcnRzID0gU3VwcG9ydCJdfQ==